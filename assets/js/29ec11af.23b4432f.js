"use strict";(self.webpackChunkdocs_sample=self.webpackChunkdocs_sample||[]).push([[979],{5404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>l});var s=n(6672);const r={},i=s.createContext(r);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:t},e.children)}},7787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"search-patterns","title":"Search Patterns","description":"Tv uses a fuzzy matching algorithm to filter the list of entries. Its behavior depends on the input pattern you provide.","source":"@site/docs/search-patterns.md","sourceDirName":".","slug":"/search-patterns","permalink":"/television-docs-sample/docs/search-patterns","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Search Patterns","sidebar_position":6},"sidebar":"docSidebar","previous":{"title":"Keybindings","permalink":"/television-docs-sample/docs/keybindings"},"next":{"title":"Shell Autocompletion","permalink":"/television-docs-sample/docs/shell-autocompletion"}}');var r=n(3420),i=n(5404);const c={title:"Search Patterns",sidebar_position:6},l=void 0,d={},o=[];function h(e){const t={a:"a",code:"code",em:"em",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Tv uses a fuzzy matching algorithm to filter the list of entries. Its behavior depends on the input pattern you provide."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Matcher"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Pattern"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Fuzzy"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"foo"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Substring"}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:"'foo"})," / ",(0,r.jsx)(t.code,{children:"!foo"})," to negate"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Prefix"}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:"^foo"})," / ",(0,r.jsx)(t.code,{children:"!^foo"})," to negate"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Suffix"}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:"foo$"})," / ",(0,r.jsx)(t.code,{children:"!foo$"})," to negate"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Exact"}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:"^foo$"})," / ",(0,r.jsx)(t.code,{children:"!^foo$"})," to negate"]})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"These patterns (and matchers) can be associated to express complex search queries such as:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"car 'bike !^car !bike$\n"})}),"\n",(0,r.jsx)(t.p,{children:"which translates to anything that:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["fuzzy matches ",(0,r.jsx)(t.code,{children:"car"})]}),"\n",(0,r.jsxs)(t.li,{children:["contains the exact substring ",(0,r.jsx)(t.code,{children:"bike"})]}),"\n",(0,r.jsxs)(t.li,{children:["does not start with ",(0,r.jsx)(t.code,{children:"car"})]}),"\n",(0,r.jsxs)(t.li,{children:["does not end with ",(0,r.jsx)(t.code,{children:"bike"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"And will produce the following results:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"haystack"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"match"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"explanation"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.em,{children:"the car drove past the bike"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u274c"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"ends with bike"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.em,{children:"car, bike or bus?"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u274c"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"starts with car"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.em,{children:"the black motorbike flew past the tourists"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,r.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.em,{children:"the motorbike flew past the tourists"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u274c"}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"doesn't contain 'car'"})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["For more information on the matcher behavior, see the\n",(0,r.jsx)(t.a,{href:"https://docs.rs/nucleo-matcher/latest/nucleo_matcher/pattern/enum.AtomKind.html",children:"nucleo-matcher"})," documentation."]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);