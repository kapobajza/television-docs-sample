"use strict";(self.webpackChunkdocs_sample=self.webpackChunkdocs_sample||[]).push([[686],{5404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(6672);const l={},c=i.createContext(l);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(c.Provider,{value:n},e.children)}},9757:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"cable-channels","title":"Cable Channels","description":"Tired of broadcast television? Want to watch your favorite shows on demand? television has you covered with cable channels. Cable channels are channels that are not built-in to television but are instead provided by the community.","source":"@site/docs/cable-channels.md","sourceDirName":".","slug":"/cable-channels","permalink":"/television-docs-sample/docs/cable-channels","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Cable Channels","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/television-docs-sample/docs/getting-started"},"next":{"title":"Configuration file","permalink":"/television-docs-sample/docs/configuration-file"}}');var l=s(3420),c=s(5404);const a={title:"Cable Channels",sidebar_position:2},t="Cable Channels",o={},d=[{value:"\u2699\ufe0f\u200b Git",id:"\ufe0f-git",level:2},{value:"\ud83c\udf7f <code>logs</code>",id:"-logs",level:3},{value:"\ud83c\udf7f <code>branches</code>",id:"-branches",level:3},{value:"\ud83c\udf7f <code>diff</code>",id:"-diff",level:3},{value:"\ud83c\udf7f <code>files</code>",id:"-files",level:3},{value:"\ud83c\udf7f <code>reflog</code>",id:"-reflog",level:3},{value:"\u2699\ufe0f\u200b Shell history",id:"\ufe0f-shell-history",level:2},{value:"\ud83c\udf7f <code>zsh</code>",id:"-zsh",level:3},{value:"\ud83c\udf7f <code>bash</code>",id:"-bash",level:3},{value:"\ud83c\udf7f <code>fish</code>",id:"-fish",level:3},{value:"\u2699\ufe0f\u200b files",id:"\ufe0f-files",level:2},{value:"\ud83c\udf7f <code>dotfiles</code>",id:"-dotfiles",level:3},{value:"\ud83c\udf7f <code>hidden-files</code>",id:"-hidden-files",level:3},{value:"\u2699\ufe0f\u200b Docker",id:"\ufe0f-docker",level:2},{value:"\ud83c\udf7f <code>images</code>",id:"-images",level:3},{value:"\u2699\ufe0f\u200b S3",id:"\ufe0f-s3",level:2},{value:"\ud83c\udf7f <code>buckets</code>",id:"-buckets",level:3},{value:"\u2699\ufe0f\u200b Homebrew",id:"\ufe0f-homebrew",level:2},{value:"\ud83c\udf7f <code>brew list</code>",id:"-brew-list",level:3},{value:"\u2699\ufe0f\u200b Tmux",id:"\ufe0f-tmux",level:2},{value:"\ud83c\udf7f <code>sessions</code>",id:"-sessions",level:3},{value:"\u2699\ufe0f Nix",id:"\ufe0f-nix",level:2},{value:"\ud83c\udf7f <code>nixpkgs</code>",id:"-nixpkgs",level:3},{value:"\u2699\ufe0f Guix",id:"\ufe0f-guix",level:2},{value:"\ud83c\udf7f <code>guix-packages</code>",id:"-guix-packages",level:3},{value:"\u2699\ufe0f Pacman",id:"\ufe0f-pacman",level:2},{value:"\ud83c\udf7f <code>pacman-pkgs</code>",id:"-pacman-pkgs",level:3},{value:"\u2699\ufe0f Task Warrior",id:"\ufe0f-task-warrior",level:2},{value:"\ud83c\udf7f <code>task</code>",id:"-task",level:3}];function r(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"cable-channels",children:"Cable Channels"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"Tired of broadcast television? Want to watch your favorite shows on demand? television has you covered with cable channels. Cable channels are channels that are not built-in to television but are instead provided by the community."})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Installing cable channels is as simple as creating provider files in your configuration folder."}),"\n",(0,l.jsxs)(n.p,{children:["A provider file is a ",(0,l.jsx)(n.code,{children:"*channels.toml"})," file that contains cable channel prototypes defined as follows:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"my-custom-channels.toml"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"git-log\"\nsource_command = 'git log --oneline --date=short --pretty=\"format:%h %s %an %cd\" \"$@\"'\npreview_command = 'git show -p --stat --pretty=fuller --color=always {0}'\n\n[[cable_channel]]\nname = \"dotfiles\"\nsource_command = 'fd -t f . $HOME/.config'\npreview_command = ':files:'\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This would add two new cable channels to ",(0,l.jsx)(n.code,{children:"television"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["a ",(0,l.jsx)(n.code,{children:"git-log"})," channel, using the specified ",(0,l.jsx)(n.code,{children:"source_command"})," to get its entries and using the ",(0,l.jsx)(n.code,{children:"preview_command"})," to generate previews"]}),"\n",(0,l.jsxs)(n.li,{children:["a ",(0,l.jsx)(n.code,{children:"dotfiles"})," channel, using the specified ",(0,l.jsx)(n.code,{children:"source_command"})," to get its entries and using tv's builtin ",(0,l.jsx)(n.code,{children:"files"})," previewer"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"These cable channels are accessible:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["through the cli ",(0,l.jsx)(n.code,{children:"tv my-dotfiles"})," or ",(0,l.jsx)(n.code,{children:"tv git-log"})]}),"\n",(0,l.jsx)(n.li,{children:"using the remote control mode as shown below"}),"\n"]}),"\n",(0,l.jsx)("img",{width:"1465",alt:"Cable channels",src:"https://github.com/user-attachments/assets/0f30b3c2-140d-4865-8d2e-0175d481073c"}),"\n",(0,l.jsx)(n.h1,{id:"-cable-channel-prototypes-spec",children:"\ud83d\udcd8 Cable channel prototypes spec"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-[[cable_channel]]",children:"name = String\nsource_command = String\npreview_command = Option<String>\npreview_delimiter = Option<String>\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["[!TIP] > ",(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"preview_command"})," may be:"]})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a shell command that produces an output given the selected entry (or a segment of it)"}),"\n",(0,l.jsxs)(n.li,{children:["a reference to a builtin previewer formatted as ",(0,l.jsx)(n.code,{children:":previewer:"})," where ",(0,l.jsx)(n.code,{children:"previewer"})," is one of the following:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"files"})," (syntax highlighted content)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"env"})," (environment variable values)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"basic"})," (the full entry string)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["[!TIP] > ",(0,l.jsx)(n.strong,{children:"Deciding which part of the source command output to pass to the previewer:"})]}),"\n",(0,l.jsxs)(n.p,{children:["By default, each line of the source command can be passed to the previewer using ",(0,l.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["If you wish to pass only a part of the output to the previewer, you may do so by specifying the ",(0,l.jsx)(n.code,{children:"preview_delimiter"})," to use as a separator and refering to the desired part using the corresponding index."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "Disney channel"\nsource_command = \'echo "one:two:three:four" && echo "five:six:seven:eight"\'\npreview_command = \'echo {2}\'\npreview_delimiter = \':\'\n# which will pass "three" and "seven" to the preview command\n'})}),"\n"]}),"\n",(0,l.jsx)(n.h1,{id:"-cable-channels-guide",children:"\ud83d\udcfa Cable Channels Guide"}),"\n",(0,l.jsx)(n.p,{children:"What follows is a list of cable channels you may pick and choose from for your own use."}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["[!NOTE] > ",(0,l.jsx)(n.strong,{children:"This list is maintained by the community, so feel free to contribute your own ideas too! \ud83d\ude0a"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-git",children:"\u2699\ufe0f\u200b Git"}),"\n",(0,l.jsxs)(n.h3,{id:"-logs",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"logs"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "git-log"\nsource_command = \'git log --oneline --date=short --pretty="format:%h %s %an %cd" "$@"\'\npreview_command = \'git show -p --stat --pretty=fuller --color=always {0}\'\n'})}),"\n",(0,l.jsx)("img",{width:"1465",alt:"Cable channels",src:"https://github.com/user-attachments/assets/0f30b3c2-140d-4865-8d2e-0175d481073c"}),"\n",(0,l.jsxs)(n.h3,{id:"-branches",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"branches"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"git-branch\"\nsource_command = 'git --no-pager branch --all --format=\"%(refname:short)\"'\npreview_command = 'git show -p --stat --pretty=fuller --color=always {0}'\n"})}),"\n",(0,l.jsx)("img",{width:"1465",alt:"branches",src:"https://github.com/user-attachments/assets/75519e04-11c8-46b8-9bc8-0e3c1e1c9784"}),"\n",(0,l.jsxs)(n.h3,{id:"-diff",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"diff"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "git-diff"\nsource_command = "git diff --name-only"\npreview_command = "git diff --color=always {0}"\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"-files",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"files"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"git-files\"\nsource_command = 'git ls-files'\npreview_command = 'bat -n --color=always {}'\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"-reflog",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"reflog"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"git-reflog\"\nsource_command = 'git reflog'\npreview_command = 'git show -p --stat --pretty=fuller --color=always {0}'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-shell-history",children:"\u2699\ufe0f\u200b Shell history"}),"\n",(0,l.jsxs)(n.h3,{id:"-zsh",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"zsh"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "zsh-history"\nsource_command = "tail -r $HOME/.zsh_history | cut -d\\";\\" -f 2-"\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"-bash",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"bash"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "bash-history"\nsource_command = "tail -r $HOME/.bash_history"\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"-fish",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"fish"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "fish-history"\nsource_command = "fish -c \'history\'"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-files",children:"\u2699\ufe0f\u200b files"}),"\n",(0,l.jsxs)(n.h3,{id:"-dotfiles",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"dotfiles"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "dotfiles"\nsource_command = "fd -t f . $HOME/.config"\npreview_command = ":files:"\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"-hidden-files",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"hidden-files"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "files"\nsource_command = "fd -I -t f"\npreview_command = ":files:"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-docker",children:"\u2699\ufe0f\u200b Docker"}),"\n",(0,l.jsxs)(n.h3,{id:"-images",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"images"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"docker-images\"\nsource_command = 'docker image list --format \"{{.ID}} {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"'\npreview_command = 'docker image inspect {0} | jq -C'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-s3",children:"\u2699\ufe0f\u200b S3"}),"\n",(0,l.jsxs)(n.h3,{id:"-buckets",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"buckets"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"s3-buckets\"\nsource_command = 'aws s3 ls | cut -d \" \" -f 3'\npreview_command = 'aws s3 ls s3://{0}'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-homebrew",children:"\u2699\ufe0f\u200b Homebrew"}),"\n",(0,l.jsxs)(n.h3,{id:"-brew-list",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"brew list"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"Brew list\"\nsource_command = 'brew list --versions'\npreview_command = 'brew info {0}'\n"})}),"\n",(0,l.jsx)("img",{width:"2557",alt:"Screenshot 2024-12-07 at 14 20 25",src:"https://github.com/user-attachments/assets/2e55ddb9-c77e-4e1a-b322-03861497db9a"}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-tmux",children:"\u2699\ufe0f\u200b Tmux"}),"\n",(0,l.jsxs)(n.h3,{id:"-sessions",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"sessions"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:"[[cable_channel]]\nname = \"tmux list-sessions\"\nsource_command = 'tmux list-sessions'\npreview_command = 'tmux list-windows -t {0}'\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To select a session to attach to ",(0,l.jsx)(n.code,{children:"tmux attach -t $(tmux list-sessions | tv --preview 'tmux list-windows -t {0}' | cut -d':' -f1)"})]}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-nix",children:"\u2699\ufe0f Nix"}),"\n",(0,l.jsxs)(n.h3,{id:"-nixpkgs",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"nixpkgs"})]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://github.com/3timeslazy/nix-search-tv",children:"https://github.com/3timeslazy/nix-search-tv"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "nixpkgs"\nsource_command = "nix-search-tv print"\npreview_command = "nix-search-tv preview {}"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://asciinema.org/a/AUt4rfSukwSWsrlis7ZNsBP4N",children:(0,l.jsx)(n.img,{src:"https://asciinema.org/a/AUt4rfSukwSWsrlis7ZNsBP4N.svg",alt:"asciicast"})})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-guix",children:"\u2699\ufe0f Guix"}),"\n",(0,l.jsxs)(n.h3,{id:"-guix-packages",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"guix-packages"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "guix-packages"\nsource_command = "guix package --list-available=.* | cut -f 1 | tr -d [:blank:]"\npreview_command = "guix package --show={0}"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{src:"https://github.com/user-attachments/assets/1135dfab-ffbc-4003-8dec-45aef1c0d52e",alt:"Screenshot displaying the search results for Emacs. The main Emacs package is selected, showing its description in the preview."})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-pacman",children:"\u2699\ufe0f Pacman"}),"\n",(0,l.jsxs)(n.h3,{id:"-pacman-pkgs",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"pacman-pkgs"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "pacman-pkgs"\nsource_command = "pacman -Qe"\npreview_command = "pacman -Qi {0}"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{src:"https://github.com/user-attachments/assets/2b5ea887-0189-48f3-88c2-59376fb5c966",alt:"tv-pacman"})}),"\n",(0,l.jsx)(n.h2,{id:"\ufe0f-task-warrior",children:"\u2699\ufe0f Task Warrior"}),"\n",(0,l.jsxs)(n.h3,{id:"-task",children:["\ud83c\udf7f ",(0,l.jsx)(n.code,{children:"task"})]}),"\n",(0,l.jsx)(n.p,{children:"This will allow you to search tasks. Note that it doesn't handle tasks with quotes in them. And annotations are not quite right."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[[cable_channel]]\nname = "task"\nsource_command = "task rc.defaultwidth:500 rc.defaultheight:1000"\npreview_command = "task $(echo {} | awk \'/([0-9])/{ print $1 }\')"\n\n[[cable_channel]]\nname = "task_complete"\nsource_command = "task rc.defaultwidth:500 rc.defaultheight:1000 complete"\npreview_command = "task $(echo {} | awk \'/([0-9a-f])/{ print $2 }\')"\n'})}),"\n",(0,l.jsx)(n.p,{children:"These aliases will allow you to edit the resulting task:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"alias tfz='B=$(tv task | awk '\"'\"'/([0-9])/{ print $1 }'\"'\"' ); task edit $B'\nalias tfzc='B=$(tv task_complete | awk '\"'\"'/([1-9])/{ print $2 }'\"'\"' ); task edit $B'\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}}}]);